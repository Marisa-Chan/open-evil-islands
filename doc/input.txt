Cursed Earth Input subsystem design and implementation
========================================================

   * This file is part of Cursed Earth.

     Cursed Earth is an open source, cross-platform port of Evil Islands.
     Copyright (C) 2009-2010 Yanis Kurganov.

     Permission is granted to copy, distribute and/or modify this document
     under the terms of the GNU Free Documentation License, Version 1.3
     or any later version published by the Free Software Foundation;
     with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.

     You should have received a copy of the GNU Free Documentation License
     along with this program. If not, see <http://www.gnu.org/licenses/>.

   * This is an internal documentation currently available only on Russian.
     Something more strong in English will be later.

   * Дизайн подсистемы ввода.
     Уровень 0.
     На низком уровне доступны лишь несколько примитивных функций.

     Инициализация/деинициализация подсистемы:
     bool input_init(void);
     void input_term(void);

     На каждом игровом цикле необходимо обновлять
     внутренние структуры подсистемы:
     void input_advance(float elapsed);

     bool input_test(input_button button);
     Функция даёт простой ответ, нажата ли такая клавиша.

     vec2 input_mouse_offset(void);
     Эта функция возвращает относительное смещение курсора мыши.

     Уровень 1 - события.
     На более высоком уровне доступны события ввода. Комбинируя события в
     иерархическую структуру, можно задавать условия, по которым будет
     срабатывать событие-корень иерархии. Также можно задавать
     различные сочетания клавиш.

     Первое, что необходимо сделать - это создать поставщика (он же и
     хранитель) событий. Он создан для удобства и предоставления
     унифицированного доступа к хранимым событиям.

     input_event_supply* input_event_supply_new(void);
     Функция создаёт новый экземпляр поставщика.

     С помощью поставщика можно начать создавать события:
     input_event* ce_input_event_supply_*_event(input_event_supply* es, ...);

     void input_event_supply_advance(input_event_supply* es, float elapsed);
     На каждом игровом цикле нужно вызывать функцию обновления поставщика.
     Поставщик сам обновит все хранимые у себя события.

     void input_event_supply_del(input_event_supply* es);
     Уничтожает поставщика и все события, созданные с помощью него.
     Все указатели на эти события становятся недействительными.

     bool input_event_triggered(input_event* ev);
     Функция проверяет, сработало ли событие.

     Уровень 2 - быстрые клавиши.
     На этом уровне доступно задание сочетаний клавиш в строке символов.

     input_event* input_event_supply_shortcut(input_event_supply* es,
                                               const char* key_sequence);
     Функция разбирает строку и возвращает событие-корень иерархии.
     В случае неудачи возвращает NULL.

     Замечание. Если функция потерпела неудачу, уже созданные события
     останутся храниться в поставщике. Чтобы не допустить утечек памяти,
     рекомендуется создавать сочетания клавиш в отдельном поставщике и
     удалять его в случае неудачи. В будущем, возможно, проблема будет
     устранена. Чаще всего сочетания задаются статически и при
     возникновении ошибок сразу же поправляются в коде.

   * Пример использования.
     На какую-то клавишу мы хотим задать переключение какого-то режима в игре.
     Низкого уровня недостаточно, т.к. функция input_test будет возвращать
     положительный ответ снова и снова, пока нажата клавиша.
     Как результат - многократное переключение режима туда и обратно.
     Причём при отжатии кнопки режим может остаться тем же, каким и был.

     Хотелось бы переключить режим один раз в момент нажатия кнопки.
     Что происходит дальше - сколько времени кнопка нажата, когда отжата -
     нас не интересует. Всё это можно сделать с помощью событий.

     input_init();
     input_event_supply* es = input_event_supply_new();
     ...
     input_event* evx = input_event_supply_button_event(es, KB_X);
     input_event* ev = input_event_supply_single_front_event(es, evx);
     ...
     input_advance(elapsed);
     input_event_supply_advance(es, elapsed);
     ...
     if (input_event_triggered(ev)) {
         ...
     }
     ...
     input_event_supply_del(es);
     input_term();

     В приведённом выше коде создаётся событие нажатия кнопки x,
     которое, в свою очередь, помещается в событие-фильтр single_front_event.
     Это событие сработает только один раз, когда нажата клавиша.
     Естественно, когда клавиша отжата и снова нажата,
     событие сработает вновь один раз. Это то, чего мы и добивались.

     Замечание. В коде я создаю x_key_event - событие-прокси к клавише x.
     Это нужно всвязи с тем, что single_front_event требует на вход
     любое событие, а не клавишу (конечно же, для большей гибкости).

     Пример посложнее. Задача: сделать "быструю клавишу" Ctrl+Enter,
     срабатывающую один раз при отпускании.

     input_init();
     input_event_supply* es = input_event_supply_new();
     ...
     input_event* ev1 = input_event_supply_button_event(es, KB_CTRL);
     input_event* ev2 = input_event_supply_button_event(es, KB_ENTER);
     input_event* ev3 = input_event_supply_and2_event(es, ev1, ev2);
     input_event* ev = input_event_supply_single_back_event(es, ev3);
     ...
     input_advance(elapsed);
     input_event_supply_advance(es, elapsed);
     ...
     if (input_event_triggered(ev)) {
         ...
     }
     ...
     input_event_supply_del(es);
     input_term();

     Пример для сочетаний клавиш.
     Примеры выше довольно громоздки. Можно воспользоваться 2-м уровнем
     подсистемы для упрощения кода и уменьшения машинальной работы.
     Зададим событие выхода из приложения с помощью двух
     сочетаний клавиш: Ctrl+Q и Alt+X.

     input_init();
     input_event_supply* es = input_event_supply_new();
     ...
     input_event* ev = input_event_supply_shortcut(es, "LControl+Q, LAlt+X");
     ...
     input_advance(elapsed);
     input_event_supply_advance(es, elapsed);
     ...
     if (input_event_triggered(ev)) {
         ...
     }
     ...
     input_event_supply_del(es);
     input_term();

   * Что планируется.
     Улучшить разбор строки с сочетаниями клавиш. Обрабатывать сокращённые
     названия клавиш, с префиксами L/R и без них, диагностические сообщения.
