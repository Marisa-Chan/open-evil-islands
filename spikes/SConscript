#!/usr/bin/env python
# -*- coding: utf-8 -*-

#  This file is part of Cursed Earth.
#
#  Cursed Earth is an open source, cross-platform port of Evil Islands.
#  Copyright (C) 2009-2010 Yanis Kurganov.
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.

import os
import re
import logging

import SCons.Util

import ceerrors

version_re = re.compile(r"^(\d+\.\d+\.\d+)\s*$")

Import("env")
env = env.Clone()

env.AppendUnique(
	CPPPATH=[os.path.join("#game", "include")],
	LIBPATH=[os.path.join("#game", "lib", "$GEN_PATH")],
	LIBS=["game"],
)

if env["TARGET_PLATFORM"] == "posix":
	env.AppendUnique(
		LIBS=["glut", "GLU", "GL"],
	)
elif env["TARGET_PLATFORM"] == "win32":
	env.AppendUnique(
		LIBS=["freeglut", "glu32",
				"opengl32", "winmm", "gdi32"],
	)

def make_target(name):
	spike_env = env.Clone()
	spike_env.VariantDir(os.path.join(name, "build", "$GEN_PATH"),
		os.path.join(name, "src"), duplicate=False)
	version_file = spike_env.File(os.path.join(name, "VERSION"))
	if not version_file.exists():
		logging.critical("Failed to build spike '%s': "
						"'VERSION' file not exists.", name)
		ceerrors.stop()
	version = version_re.match(version_file.get_contents())
	if version is None:
		logging.critical("Failed to build spike '%s': "
						"'VERSION' file format was not recognized.", name)
		ceerrors.stop()
	spike_env.AppendUnique(
		CPPDEFINES=["CE_SPIKE_VERSION='\"%s\"'" % version.group(1)],
	)
	return spike_env.Alias(name, spike_env.Command(os.path.join(name, "bin",
		SCons.Util.adjustixes(name, spike_env.subst("$PROGPREFIX"),
		spike_env.subst("$PROGSUFFIX"))), spike_env.Program(os.path.join(name,
		"bin", "$GEN_PATH", name), [os.path.join(name, "build", "$GEN_PATH",
		node.name) for node in spike_env.Glob(os.path.join(name, "src", "*.c"))]),
		Copy("$TARGET", "$SOURCE")))

targets = [make_target(name) for name in os.listdir(".") if os.path.isdir(name)]

Return("targets")
