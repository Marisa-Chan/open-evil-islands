# -*- coding: utf-8 -*-

# This file is part of Open Evil Islands.
#
# Open Evil Islands is an open source, cross-platform port of the original Evil Islands from Nival.
# Copyright (C) 2009-2017 Yanis Kurganov <yanis.kurganov@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import utils, os, re, SCons
Import("env")

env = env.Clone(
    tools=["rcx", "sign"]
)

env.PrependUnique(
    CPPPATH=os.path.join("#", "engine", "headers")
)

version_re = re.compile(r"^(\d+)\.(\d+)$")

def make_target(env, dir):
    env = env.Clone(
        SPIKE_OBJECT_BUILD_PATH=os.path.join("$SCONSX_OBJECT_BUILD_PATH", dir.name)
    )
    env.VariantDir("$SPIKE_OBJECT_BUILD_PATH", dir, duplicate=False)
    spike_version_major = "0"
    spike_version_minor = "0"
    version_file = env.File(os.path.join(dir.name, "VERSION"))
    if version_file.exists():
        version = version_re.match(version_file.get_contents())
        if version is None:
            utils.interrupt(env, "{0}: couldn't recognize 'VERSION' file format (hint: <major>.<minor>)".format(dir.name))
        else:
            spike_version_major = version.group(1)
            spike_version_minor = version.group(2)
    env.AppendUnique(
        CPPDEFINES=[
            "CE_SPIKE_VERSION_MAJOR=" + spike_version_major,
            "CE_SPIKE_VERSION_MINOR=" + spike_version_minor,
        ]
    )
    return env.Alias(
        dir.name,
        env.Sign(
            os.path.join("$SCONSX_BINARY_BUILD_PATH", dir.name),
            env.Program(
                os.path.join("$SCONSX_BINARY_BUILD_PATH", dir.name + "-unsigned"),
                [os.path.join("$SPIKE_OBJECT_BUILD_PATH", node.name) for node in dir.glob("*.cpp")] + dir.glob("resource.TODO")
            )
        )
    )

targets = [make_target(env, dir) for dir in env.Glob("*") if isinstance(dir, SCons.Node.FS.Dir)]

Return("targets")
